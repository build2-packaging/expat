# file      : libexpat/buildfile
# license   : MIT; see accompanying COPYING file

lib{expat}: libul{expat}

# xmltok_{impl,nc}.c files are included into xmltok.c, so exclude them from
# the compilation.
#
{libul libue}{expat}: h{*} c{* -xmltok_impl -xmltok_ns}
{libul libue}{expat}: c{xmltok_impl xmltok_ns}: include = adhoc

tclass = $c.target.class

msvc_runtime = ($c.target.system == 'win32-msvc')

# Symbol exporting for MSVC and Clang targeting MSVC is done via the .def
# file.
#
# Note that for MinGW it's done the same way as for POSIX via the visibility
# function attribute.
#
libs{expat}: def{libexpat}: include = $msvc_runtime

def{libexpat}: in{libexpat.def.cmake}
{
  in.symbol = '@'
  in.substitution = lax
  in.substitutions = _EXPAT_COMMENT_ATTR_INFO@';' _EXPAT_COMMENT_DTD_OR_GE@' '
}

# Build options.
#
# Note that for unit testing upstream rebuilds the shared library as static
# and defining the XML_TESTING macro. Being defined, this macro introduces
# some counters and enables direct modification of some global internal
# variables by unit tests. That, however, doesn't change the public API and
# doesn't visibly affect the performance. Thus, we just build the main library
# with this macro defined and use it for the unit testing.
#
c.poptions += -DHAVE_EXPAT_CONFIG_H -DXML_BUILDING_EXPAT -DXML_TESTING

if! $msvc_runtime
  c.poptions += -DXML_ENABLE_VISIBILITY=1

c.poptions =+ "-I$src_base"

# Get rid of the "implicit declaration of function ‘arc4random_buf’" error,
# which may appear when compile specifying the C99 standard explicitly, which
# we do (see build/root.build for the reasoning).
#
if ($c.stdlib == 'glibc')
  obj{xmlparse}: c.poptions += -D_GNU_SOURCE

if ($c.class == 'gcc')
{
  c.coptions += -fexceptions -fno-strict-aliasing

  if! $msvc_runtime
    c.coptions += -fvisibility=hidden

  # Disable warnings that pop up with -Wall -Wextra.
  #
  # Note that -Wno-implicit-fallthrough is only supported starting from GCC 7
  # and Clang 3.9. However, we don't check for the compiler version since the
  # earlier compiler versions do not complain about unknown -Wno-* options,
  # unless some other diagnostics is issued.
  #
  # Also note that these warnings can be build2-specific due to the
  # intermediate translation unit pre-processing phase, which wipes the `fall
  # through` comments from the macro definitions.
  #
  c.coptions += -Wno-implicit-fallthrough
}

switch $tclass
{
  case 'linux' | 'bsd'
  {
    # Make sure all symbols are resolvable.
    #
    c.loptions += -Wl,--no-undefined
  }
}

# Export options.
#
lib{expat}:  cc.export.poptions  = "-I$src_base"
liba{expat}: cc.export.poptions += -DXML_STATIC

# See bootstrap.build for details.
#
if $version.pre_release
  lib{expat}: bin.lib.version = @"-$version.project_id"
else
  lib{expat}: bin.lib.version = @"-$abi_version_major" linux@"$abi_version"

# Install the bare minimum of headers (note: not recreating subdirectories).
#
h{*}: install = false

for h: expat expat_external expat_config
  h{$h}@./: install = include/
